from Jade require "crypto_kem/kyber/kyber768/common/params.jinc"
from Jade require "crypto_kem/kyber/common/amd64/ref/poly.jinc"
from Jade require "crypto_kem/kyber/common/amd64/ref/polyvec.jinc"
require "gen_matrix.jinc"

inline
fn __indcpa_keypair(reg u64 pkp, reg u64 skp)
{
  stack u64 spkp sskp;
  stack u8[KYBER_SYMBYTES] rb;
  stack u16[KYBER_K * KYBER_VECN] a;
  stack u16[KYBER_VECN] e pkpv skpv;
  stack u8[64] buf;
  stack u8[KYBER_SYMBYTES] publicseed noiseseed;
  stack u8[32] inbuf;
  reg u64 i, j;
  reg u64 zero;
  reg u8 nonce;
  reg u8 c;
  inline int k;

  spkp = pkp;
  sskp = skp;

  rb = #randombytes(rb);

  i = 0;
  while (i < KYBER_SYMBYTES)
  {
    c = rb[(int) i];
    inbuf[(int) i] = c;
    i += 1;
  }

  buf = _isha3_512_32(buf, inbuf);

  i = 0;
  j = KYBER_SYMBYTES;
  while (i < KYBER_SYMBYTES)
  {
    c = buf[(int)i];
    publicseed[(int)i] = c;
    c = buf[(int)j];
    noiseseed[(int)i] = c;
    i += 1;
    j += 1;
  }

  zero = 0; 
  a = __gen_matrix(publicseed, zero);

  nonce = 0;
  skpv[0:KYBER_N] = _poly_getnoise_eta1(skpv[0:KYBER_N], noiseseed, nonce);
  nonce = 1;
  skpv[KYBER_N:KYBER_N] = _poly_getnoise_eta1(skpv[KYBER_N:KYBER_N], noiseseed, nonce);
  nonce = 2;
  skpv[2*KYBER_N:KYBER_N] = _poly_getnoise_eta1(skpv[2*KYBER_N:KYBER_N], noiseseed, nonce);

  nonce = 3;
  e[0:KYBER_N] = _poly_getnoise_eta1(e[0:KYBER_N], noiseseed, nonce);
  nonce = 4;
  e[KYBER_N:KYBER_N] = _poly_getnoise_eta1(e[KYBER_N:KYBER_N], noiseseed, nonce);
  nonce = 5;
  e[2*KYBER_N:KYBER_N] = _poly_getnoise_eta1(e[2*KYBER_N:KYBER_N], noiseseed, nonce);

  skpv = __polyvec_ntt(skpv);
  e    = __polyvec_ntt(e);

  for k=0 to KYBER_K
  {
    pkpv[k*KYBER_N:KYBER_N] = __polyvec_pointwise_acc(a[k*KYBER_VECN:KYBER_VECN], skpv);
    pkpv[k*KYBER_N:KYBER_N] = _poly_frommont(pkpv[k*KYBER_N:KYBER_N]);
  }

  pkpv = __polyvec_add2(pkpv, e);
  pkpv = __polyvec_reduce(pkpv);

  pkp = spkp;
  skp = sskp;

  __polyvec_tobytes(skp, skpv);
  __polyvec_tobytes(pkp, pkpv);

  i = 0;
  pkp += KYBER_POLYVECBYTES; 
  while (i < KYBER_SYMBYTES)
  {
    c = publicseed[(int)i];
    (u8)[pkp] = c;
    pkp += 1;
    i += 1;
  }
}

inline
fn __indcpa_enc_0(stack u64 s_ctp, reg ptr u8[32] msgp, reg u64 pkp, reg ptr u8[KYBER_SYMBYTES] noiseseed)
{
  stack ptr u8[KYBER_SYMBYTES] s_seed;
  stack u16[KYBER_VECN] pkpv sp ep bp;
  stack u16[KYBER_K*KYBER_VECN] aat;
  stack u16[KYBER_N] k epp v;
  stack u8[KYBER_SYMBYTES] publicseed;
  reg ptr u8[KYBER_SYMBYTES] lseed;
  reg u64 i;
  reg u64 ctp;
  reg u16 t;
  reg u8 c nonce;
  inline int j;

  lseed = noiseseed;

  pkpv = __polyvec_frombytes(pkp);

  i = 0;
  pkp += KYBER_POLYVECBYTES;
  while (i < KYBER_SYMBYTES)
  {
    c = (u8)[pkp];
    publicseed[(int)i] = c;
    pkp += 1;
    i += 1;
  }

  k = _i_poly_frommsg(k, msgp);

  aat = __gen_matrix(publicseed, 1);

  s_seed = lseed;
  nonce = 0;
  sp[0:KYBER_N] = _poly_getnoise_eta1(sp[0:KYBER_N], lseed, nonce);
  lseed = s_seed;
  nonce = 1;
  sp[KYBER_N:KYBER_N] = _poly_getnoise_eta1(sp[KYBER_N:KYBER_N], lseed, nonce);
  lseed = s_seed;
  nonce = 2;
  sp[2*KYBER_N:KYBER_N] = _poly_getnoise_eta1(sp[2*KYBER_N:KYBER_N], lseed, nonce);

  lseed = s_seed;
  nonce = 3;
  ep[0:KYBER_N] = _poly_getnoise_eta1(ep[0:KYBER_N], lseed, nonce);
  lseed = s_seed;
  nonce = 4;
  ep[KYBER_N:KYBER_N] = _poly_getnoise_eta1(ep[KYBER_N:KYBER_N], lseed, nonce);
  lseed = s_seed;
  nonce = 5;
  ep[2*KYBER_N:KYBER_N] = _poly_getnoise_eta1(ep[2*KYBER_N:KYBER_N], lseed, nonce);

  lseed = s_seed;
  nonce = 6;
  epp = _poly_getnoise_eta1(epp, lseed, nonce);

  sp = __polyvec_ntt(sp);
    
  for j=0 to KYBER_K
  {
    bp[j*KYBER_N:KYBER_N] = __polyvec_pointwise_acc(aat[j*KYBER_VECN:KYBER_VECN], sp);
  }
  
  v = __polyvec_pointwise_acc(pkpv, sp);

  bp = __polyvec_invntt(bp);
  v = _poly_invntt(v);

  bp = __polyvec_add2(bp, ep);
  v = _poly_add2(v, epp);
  v = _poly_add2(v, k);
  bp = __polyvec_reduce(bp);
  v  = __poly_reduce(v);

  ctp = s_ctp;
  __polyvec_compress(ctp, bp);
  ctp += KYBER_POLYVECCOMPRESSEDBYTES;
  v = _poly_compress(ctp, v);
}

inline
fn __indcpa_enc_1(reg ptr u8[KYBER_INDCPA_BYTES] ctp, reg ptr u8[KYBER_INDCPA_MSGBYTES] msgp, reg u64 pkp, reg ptr u8[KYBER_SYMBYTES] noiseseed) -> reg ptr u8[KYBER_INDCPA_BYTES]
{
  stack ptr u8[KYBER_INDCPA_BYTES] s_ctp;
  stack ptr u8[KYBER_SYMBYTES] s_seed;
  stack u16[KYBER_VECN] pkpv sp ep bp;
  stack u16[KYBER_K*KYBER_VECN] aat;
  stack u16[KYBER_N] k poly epp v;
  stack u8[KYBER_SYMBYTES] publicseed;
  reg ptr u8[KYBER_SYMBYTES] lseed;
  reg u64 i;
  reg u16 t;
  reg u8 c nonce;
  inline int j;

  s_ctp = ctp;
  lseed = noiseseed;

  pkpv = __polyvec_frombytes(pkp);

  i = 0;
  pkp += KYBER_POLYVECBYTES;
  while (i < KYBER_SYMBYTES)
  {
    c = (u8)[pkp];
    publicseed[(int)i] = c;
    pkp += 1;
    i += 1;
  }

  k = _i_poly_frommsg(k, msgp);

  aat = __gen_matrix(publicseed, 1);

  s_seed = lseed;
  nonce = 0;
  sp[0:KYBER_N] = _poly_getnoise_eta1(sp[0:KYBER_N], s_seed, nonce);
  lseed = s_seed;
  nonce = 1;
  sp[KYBER_N:KYBER_N] = _poly_getnoise_eta1(sp[KYBER_N:KYBER_N], s_seed, nonce);
  lseed = s_seed;
  nonce = 2;
  sp[2*KYBER_N:KYBER_N] = _poly_getnoise_eta1(sp[2*KYBER_N:KYBER_N], lseed, nonce);

  lseed = s_seed;
  nonce = 3;
  ep[0:KYBER_N] = _poly_getnoise_eta1(ep[0:KYBER_N], lseed, nonce);
  lseed = s_seed;
  nonce = 4;
  ep[KYBER_N:KYBER_N] = _poly_getnoise_eta1(ep[KYBER_N:KYBER_N], lseed, nonce);
  lseed = s_seed;
  nonce = 5;
  ep[2*KYBER_N:KYBER_N] = _poly_getnoise_eta1(ep[2*KYBER_N:KYBER_N], lseed, nonce);

  lseed = s_seed;
  nonce = 6;
  epp = _poly_getnoise_eta1(epp, lseed, nonce);

  sp = __polyvec_ntt(sp);
    
  for j=0 to KYBER_K
  {
    bp[j*KYBER_N:KYBER_N] = __polyvec_pointwise_acc(aat[j*KYBER_VECN:KYBER_VECN], sp);
  }
  
  v = __polyvec_pointwise_acc(pkpv, sp);

  bp = __polyvec_invntt(bp);
  v = _poly_invntt(v);

  bp = __polyvec_add2(bp, ep);
  v = _poly_add2(v, epp);
  v = _poly_add2(v, k);
  bp = __polyvec_reduce(bp);
  v  = __poly_reduce(v);

  ctp = s_ctp;
  ctp[0:KYBER_POLYVECCOMPRESSEDBYTES] = __i_polyvec_compress(ctp[0:KYBER_POLYVECCOMPRESSEDBYTES], bp);
  ctp[KYBER_POLYVECCOMPRESSEDBYTES:KYBER_POLYCOMPRESSEDBYTES], v = _i_poly_compress(ctp[KYBER_POLYVECCOMPRESSEDBYTES:KYBER_POLYCOMPRESSEDBYTES], v);

  return ctp;
}


inline
fn __indcpa_dec(reg ptr u8[KYBER_INDCPA_MSGBYTES] msgp, reg u64 ctp, reg u64 skp) -> reg ptr u8[KYBER_INDCPA_MSGBYTES]
{
  stack u16[KYBER_N] t v mp;
  stack u16[KYBER_VECN] bp skpv;

  bp = __polyvec_decompress(ctp);
  ctp += KYBER_POLYVECCOMPRESSEDBYTES;
  v = _poly_decompress(v, ctp);

  skpv = __polyvec_frombytes(skp);
  
  bp = __polyvec_ntt(bp);
  t = __polyvec_pointwise_acc(skpv, bp);
  t = _poly_invntt(t );

  mp = _poly_sub(mp, v, t);
  mp = __poly_reduce(mp);
  
  msgp, mp = _i_poly_tomsg(msgp, mp);

  return msgp;
}
