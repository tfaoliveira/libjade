from Jade require "crypto_sign/dilithium/common/amd64/expandMask.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/expandS.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/fips202.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/avx2/poly.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/rounding.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/avx2/ntt.jinc"

require "params.jinc"
require "packing.jinc"

inline
fn decompose(reg u32 a) -> reg u32, reg u32 {
	reg u32 a0;
	reg u32 a1;
	a0, a1 = decompose_gamma2_32(a);
	return a0, a1;
}

inline
fn use_hint(reg u32 a hint)
	-> reg u32
{
	reg u32 a1;
	a1 = use_hint_gamma2_32(a, hint);
	return a1;
}

inline
fn expandMask_poly(reg ptr u32[Li2_polydeg] f, reg ptr u8[64] rho_prime, stack u16 kappa)
	-> reg ptr u32[Li2_polydeg] {
	f = expandMask_poly_gamma1_219(f, rho_prime, kappa);
	return f;
}

inline
fn expandS_poly(stack u8[64] rho_prime, reg u16 elem_idx, reg ptr u32[Li2_polydeg] buf)
	-> reg ptr u32[Li2_polydeg] {
    buf = expandSEta2_poly(rho_prime, elem_idx, buf);
	return buf;
}

from Jade require "crypto_sign/dilithium/common/amd64/avx2/expandA_end.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/expandMask_end.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/expandS_end.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/hashing_end.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/avx2/poly_end.jinc"
from Jade require "crypto_sign/dilithium/common/amd64/avx2/polyvec_end.jinc"

inline
fn expandA(stack u8[32] rho) -> stack u32[Li2_k * Li2_l * Li2_polydeg] {
	stack u32[Li2_k * Li2_l * Li2_polydeg] matrix;
	matrix = expandA_aligned(rho);
	return matrix;
}