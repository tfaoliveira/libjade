require "montgomery.jinc"
require "params.jinc"
require "twiddle_factors.jinc"

fn fft(reg ptr u32[Li2_polydeg] f) -> reg ptr u32[Li2_polydeg]
{
	inline int log_len;
	inline int len;
	stack u32 start j k;
	stack u32 zeta;
	reg u64 zeta_reg;
	reg u32 t;

	//inner loop bound
	stack u32 bound;
	reg u32 rbound;

	//temps
	reg u32 v32;
	reg u64 v64 addr;
	reg ptr u32[256] tfs;

	stack u32 left right;

	/*
	k = 0;
	for(len = 128; len > 0; len >>= 1) {
	*/
	k = 0;
	for log_len = 7 downto -1 {
		len = 1 << log_len;

		//for(start = 0; start < N; start = j + len) {
		start = 0;
		while(start < Li2_polydeg) {

			//zeta = zetas[++k];
			k += 1;
			tfs = twiddle_factors;
			addr = (64u) k;
			v32 = tfs[(int) addr];
			zeta = v32;

			//for(j = start; j < start + len; ++j) {
			j = start;
			bound = start;
			bound += len;
			while {
				addr = (64u) j;
				v32 = f[(int) addr];
				left = v32;
				addr += len;
				v32 = f[(int) addr];
				right = v32;

				//t = montgomery_reduce((int64_t)zeta * a[j + len]);
				v64 = (64s) right;
				zeta_reg = (64s) zeta;
				v64 *= zeta_reg;
				t = montgomery_REDC(v64);

				// a[j + len] = a[j] - t;
				v32 = left;
				v32 -= t;
				right = v32;

				// a[j] = a[j] + t;
				v32 = left;
				v32 += t;
				left = v32;
				
				addr = (64u) j;
				v32 = left;
				f[(int) addr] = v32;
				addr += len;
				v32 = right;
				f[(int) addr] = v32;

				j += 1;
				rbound = bound;
			} (j < rbound)

			v64 = (64u) j;
			v64 += len;
			start = v64;
		}
	}

	return f;
}

param int mont_sq_over_256 = 41978;

fn ifft_to_mont(reg ptr u32[Li2_polydeg] f) -> reg ptr u32[Li2_polydeg]
{
	inline int log_len;
	inline int len;
	stack u32 start j k;
	stack u32 zeta t;
	reg u64 zeta_reg;

	//inner loop bound
	stack u32 bound;
	reg u32 rbound;

	//temps
	reg u32 v32;
	reg u64 v64 addr;
	reg ptr u32[256] tfs;

	stack u32 left right;

	k = 256;
	for log_len = 0 to 8 {
		len = 1 << log_len;
		start = 0;
		while(start < Li2_polydeg) {
			k -= 1;

			tfs = twiddle_factors;
			addr = (64u) k;
			v32 = tfs[(int) addr];
			v32 *= -1;
			zeta = v32;

			j = start;
			bound = start;
			bound += len;
			while {
				addr = (64u) j;
				v32 = f[(int) addr];
				left = v32;
				addr += len;
				v32 = f[(int) addr];
				right = v32;
				
				// t = a[j];
				v32 = left;
				t = v32;

				//a[j] = t + a[j + len];
				v32 = t;
				v32 += right;
				left = v32;

				//a[j + len] = t - a[j + len];
				v32 = t;
				v32 -= right;
				right = v32;

				//a[j + len] = montgomery_reduce((int64_t)zeta * a[j + len]);
				v64 = (64s) right;
				zeta_reg = (64s) zeta;
				v64 *= zeta_reg;
				v32 = montgomery_REDC(v64);
				right = v32;
	
				addr = (64u) j;
				v32 = left;
				f[(int) addr] = v32;
				addr += len;
				v32 = right;
				f[(int) addr] = v32;

				j += 1;
				rbound = bound;
			} (j < rbound)

			v32 = j;
			v32 += len;
			start = v32;
		}
	}

	j = 0;
	while(j < Li2_polydeg) {
		//a[j] = montgomery_reduce((int64_t)f * a[j]);
		addr = (64u) j;
		v32 = f[(int) addr];

		v64 = (64s) v32;
		v64 *= mont_sq_over_256;
		v32 = montgomery_REDC(v64);

		f[(int) addr] = v32;
		j += 1;
	}
	
	return f;
}
