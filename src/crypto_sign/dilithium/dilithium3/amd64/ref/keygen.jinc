require "fips202.jinc"
require "expandA.jinc"
require "expandS.jinc"
require "polyvec.jinc"
require "packing.jinc"
require "hashing.jinc"
require "params.jinc"

inline
fn keygen()
	-> stack u8[Li2_PK_LEN], stack u8[Li2_SK_LEN]
{
	// keys
	stack u8[Li2_PK_LEN] pk;
	stack u8[Li2_SK_LEN] sk;
	// PRF
	stack u64[25] state;
	stack u8[SHAKE256_RATE] s256_out;
	// PRF outputs
	stack u8[32] rho;
	stack u8[64] rho_prime;
	stack u8[32] k;
	// FFTs
	stack u32[Li2_k * Li2_l * Li2_polydeg] fft_matA;
	stack u32[Li2_l * Li2_polydeg] s1;
	stack u32[Li2_k * Li2_polydeg] s2;
	
	stack u8[SHAKE256_RATE] s256_out;

	stack u32[Li2_k * Li2_polydeg] s2;
	stack u32[Li2_k * Li2_polydeg] t t1 t0;

	reg ptr u8[Li2_pack_t1len] t1ptr_in_pk;
	reg ptr u32[Li2_polydeg] t1_to_pack;

  stack u8[32] random_zeta;
  reg ptr u8[32] random_zeta_p;
  random_zeta_p = random_zeta;
  random_zeta_p = #randombytes(random_zeta_p);

	//temp variables
	reg u64 i;
	inline int j;
	reg u32 v32;
	reg u8 c;

	state = shake256_absorb32(random_zeta_p);
	state, s256_out = shake256_squeezeblock(state, s256_out);

	//TODO Maybe can load 8 bytes at a time using u64?
	i = 0;
	while(i < 32) {
		c = s256_out[(int) i];
		rho[(int) i] = c;
		i += 1;
	}
	while(i < 96) {
		c = s256_out[(int) i];
		rho_prime[(int) (i - 32)] = c;
		i += 1;
	}
	while(i < 128) {
		c = s256_out[(int) i];
		k[(int) (i - 96)] = c;
		i += 1;
	}

	sk[0:32] = rho_pack(rho, sk[0:32]);
	sk[32:32] = rho_pack(k, sk[32:32]); 

	s1, s2 = expandS(rho_prime);

	//saving these before they get modified in-place
	sk[96 : Li2_pack_s1len] = pack_s1(
		s1, sk[96 : Li2_pack_s1len]);
	sk[Li2_pack_s2loc : Li2_pack_s2len] = pack_s2(
		s2, sk[Li2_pack_s2loc : Li2_pack_s2len]);

	// write s1 in eta-x form
	i = 0;
	while(i < Li2_l * Li2_polydeg) {
		v32 = Li2_eta;
		v32 -= s1[(int) i];
		s1[(int) i] = v32;
		i += 1;
	}
	s1 = fft_vec(s1);

	fft_matA = expandA(rho);
	t = mult_mat_vec(fft_matA, s1);
	t = reduce32_veck(t);
	t = ifft_to_mont_vec(t);

	i = 0;
	while(i < Li2_k * Li2_polydeg) {
		v32 = Li2_eta;
		v32 -= s2[(int) i];
		s2[(int) i] = v32;
		i += 1;
	}

	t = sum_vecs(t, s2);

	t = polyveck_caddq(t);
	t1, t0 = power2round_vec(t);

	pk[0:32] = rho_pack(rho, pk[0:32]);

	for j = 0 to Li2_k {
		t1_to_pack = t1[Li2_polydeg * j : Li2_polydeg];
		t1ptr_in_pk = pk[32 + j * Li2_pack_t1len : Li2_pack_t1len];
		t1ptr_in_pk = polyt1_pack(t1_to_pack , t1ptr_in_pk);
		pk[32 + j * Li2_pack_t1len : Li2_pack_t1len] = t1ptr_in_pk;
	}

	sk[64:32] = shake256_of_pk(pk, sk[64:32]);

	for j = 0 to Li2_k {
		sk[Li2_pack_t0loc + j * Li2_pack_t0len : Li2_pack_t0len] =
			polyt0_pack(
				t0[Li2_polydeg * j : Li2_polydeg],
				sk[Li2_pack_t0loc + j * Li2_pack_t0len : Li2_pack_t0len]);
	}

	return pk, sk;
}

//

inline fn __keypair(reg u64 pk sk)
{
  stack u64 s_pk s_sk;

  stack u8[Li2_PK_LEN] public_key;
  stack u8[Li2_SK_LEN] secret_key;
  reg u8 c;
  reg u64 i;

  s_pk = pk; s_sk = sk;

  public_key, secret_key = keygen();

  pk = s_pk; sk = s_sk;

  // write public key
  ?{}, i = #set0();
  while(i < Li2_PK_LEN) {
    c = public_key[(int) i];
    (u8)[pk + i] = c;
    i += 1;
  }

  // write secret key
  ?{}, i = #set0();
  while(i < Li2_SK_LEN) {
    c = secret_key[(int) i];
    (u8)[sk + i] = c;
    i += 1;
  }
}

