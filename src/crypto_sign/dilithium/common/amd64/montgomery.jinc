require "params.jinc"

//Maybe combine into params.jinc?
param int twoTo32 = 4294967296;
param int twoTo32Minus1 = 4294967295;
param int dilithium_modulo = 8380417;
param int dilithium_modulo_left_shift_41 = 18428731874223325184;
param int dilithium_modulo_inv = 58728449;
param int dilithium_modulo_inv_neg = 4236238847;
param int dilithium_primitive_root = 1753;
param int m_1 = 4193792;
param int m_root = 2091667;

param int Li2_QINV = 58728449;

inline
fn montgomery_REDC(reg u64 a) -> reg u32
{
	reg u32 a32;
	reg u64 v64;
	reg u32 t;

	/* t = (int64_t)(int32_t)a*QINV; */
	a32 = (32s) a;
	v64 = (64s) a32;
	v64 *= dilithium_modulo_inv;
	t = (32s) v64;

	/* t = (a - (int64_t)t*Q) >> 32; */
	v64 = (64s) t;
	v64 *= -Li2_q;
	v64 += a;
	v64 >>= 32;
	t = (32s) v64;

	return t;
}

// Add Q if input coefficient is negative.
inline
fn caddq(reg u32 a) -> reg u32 {

	reg u32 a_add_q;

	a_add_q = a;
	a_add_q += Li2_q;

	a = a_add_q if(a <s 0);

	return a;
}

inline
fn checknorm(reg u32 val, inline int threshold)
	-> stack u8
{
	stack u8 result;
	result = 0;
	if(val >=s threshold) {
		result = 1;
	}
	if(val <=s -threshold) {
		result = 1;
	}
	return result;
}

inline
fn reduce32(reg u32 a) -> reg u32
{
	reg u32 t v32;

	//t = (a + (1 << 22)) >> 23;
	t = a;
	t += (1 << 22);
	t = t >>s 23;

	//t = a - t*Q;
	v32 = t;
	v32 *= Li2_q;
	t = a;
	t -= v32;
	return t;
}
