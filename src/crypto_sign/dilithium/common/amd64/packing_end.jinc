inline
fn pack_w1(reg ptr u32[Li2_k * Li2_polydeg] w1)
	-> stack u8[Li2_pack_w1len]
{
	inline int ii;
	stack u8[Li2_pack_w1len] dest;
	reg ptr u8[Li2_pack_highbitslen] buf;
	reg ptr u32[Li2_polydeg] poly;

	for ii = 0 to Li2_k {
		buf = dest[Li2_pack_highbitslen * ii : Li2_pack_highbitslen];
		poly = w1[Li2_polydeg * ii : Li2_polydeg];
		dest[Li2_pack_highbitslen * ii : Li2_pack_highbitslen] = polyw1_pack(poly, buf);
	}
	return dest;
}

inline
fn unpack_sk(reg ptr u8[Li2_SK_LEN] sk)
	-> stack u32[Li2_l * Li2_polydeg], //s1
	stack u32[Li2_k * Li2_polydeg], //s2
	stack u32[Li2_k * Li2_polydeg] //t0
{
	stack u32[Li2_l * Li2_polydeg] s1;
	stack u32[Li2_k * Li2_polydeg] s2;
	stack u32[Li2_k * Li2_polydeg] t0;

	reg ptr u32[Li2_polydeg] poly_to_unpack;
    reg ptr u8[Li2_pack_etalen] sx_in_sk;
    reg ptr u8[Li2_pack_t0len] t0_in_sk;

	inline int ii;

	// unpack sk where needed
	for ii = 0 to Li2_l {
		poly_to_unpack = s1[ii * Li2_polydeg : Li2_polydeg];
        sx_in_sk = sk[96 + ii * Li2_pack_etalen : Li2_pack_etalen];
		poly_to_unpack = polyeta_unpack(poly_to_unpack, sx_in_sk);
		s1[ii * Li2_polydeg : Li2_polydeg] = poly_to_unpack;
	}

	for ii = 0 to Li2_k {
		poly_to_unpack = s2[ii * Li2_polydeg : Li2_polydeg];
        sx_in_sk = sk[Li2_pack_s2loc + ii * Li2_pack_etalen : Li2_pack_etalen];
		poly_to_unpack = polyeta_unpack(poly_to_unpack, sx_in_sk);
		s2[ii * Li2_polydeg : Li2_polydeg] = poly_to_unpack;
	}

	for ii = 0 to Li2_k {
		poly_to_unpack = t0[ii * Li2_polydeg : Li2_polydeg];
        t0_in_sk = sk[Li2_SK_LEN - (Li2_k - ii) * Li2_pack_t0len : Li2_pack_t0len];
		poly_to_unpack = polyt0_unpack(poly_to_unpack, t0_in_sk);
		t0[ii * Li2_polydeg : Li2_polydeg] = poly_to_unpack;
	}

	return s1, s2, t0;
}

inline
fn pack_signature(reg ptr u8[32] c_tilde,
		reg ptr u32[Li2_l * Li2_polydeg] z,
		reg ptr u32[Li2_k * Li2_polydeg] h)
	-> stack u8[Li2_SIGN_LEN]
{
	stack u8[Li2_SIGN_LEN] signature;
	reg ptr u8[Li2_pack_zlen] z_buf;
	reg ptr u32[Li2_polydeg] z_to_pack;

	inline int ii;
	reg u64 i j k addr;
	reg u32 coeff;
	reg u8 c;

	?{}, i = #set0_64();
	while (i < 32) {
		c = c_tilde[(int) i];
		signature[(int) i] = c;
		i += 1;
	}

	for ii = 0 to Li2_l {
		z_buf = signature[32 + Li2_pack_zlen * ii : Li2_pack_zlen];
		z_to_pack = z[ii * Li2_polydeg : Li2_polydeg];
		z_buf = polyz_pack(z_buf, z_to_pack);
		signature[32 + Li2_pack_zlen * ii : Li2_pack_zlen] = z_buf;
	}

	// Clear the hints buffer
	?{}, i = #set0_64();
	while (i < Li2_omega + Li2_k) {
		signature[(int) (Li2_pack_hstart + i)] = 0;
		i += 1;
	}

	// Write hints
	?{}, k = #set0_64(); // The amounts of hints that were written
	?{}, i = #set0_64();
	while (i < Li2_k) {
		?{}, j = #set0_64();
		while (j < Li2_polydeg) {
			addr = i;
			addr <<= Li2_log2polydeg;
			addr += j;
			coeff = h[(int) addr];
			if coeff != 0 {
				signature[(int) (Li2_pack_hstart + k)] = (8u) j;
				k += 1;
			}
			j += 1;
		}
		signature[(int) (Li2_pack_hstart + Li2_omega + i)] = (8u) k;
		i += 1;
	}

	return signature;
}