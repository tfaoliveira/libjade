#!/usr/bin/env bash

# $ export JOBS=4; ./scripts/ci/releaser/jdist-src-test-v1 amd64

#set -x

# --
dist_arch=$1

# -- 
dist_name=libjade-dist-src-$dist_arch

libjade=$(cd "$(dirname "$0")/../../../" ; pwd -P)
libjade_src=$libjade/src
libjade_test=$libjade/test

dist=$libjade/$dist_name
dist_src=$dist/libjade
dist_ext=$dist/ext

checker()
{
  message=$1;
  return_s=$2;
  return_c=$3;

  if [ $return_c -ne 0 ];
  then
    echo -e "$message,\n---\n$return_s\n---\n$return_c\n---"
    exit $return_c
  fi
}

tar -xf $dist.tar.gz -C $libjade

#---------------------------------------------------------
# 1. check that the compilation of all *.jazz files produces the assembly code as provided

# 1.1 move *.s to *.0
while read asm
do
  mv $asm ${asm/.s/.0}
done < <(find $dist_src -name "*.s")

# 1.2 recompile files
while read asm
do
  asm=${asm/.0/.s}
  echo "(echo "$asm"; make -C $(dirname $asm) __$(basename $asm) 2> $asm.log && rm -f $asm.error || mv $asm.log $asm.error)"
done < <(find $dist_src -name "*.0") | \
parallel --max-procs=$JOBS

# 1.3 check for compilation errors (check if any $asm.error exists, then exit)
while read asm
do
  if [ -f $asm.error ]
  then
    return_s=$(cat $asm.error)
    checker "#make error" "$return_s" 1
  fi
done < <(find $dist_src -name "*.s")

# 1.4 check for differences in the assembly files
while read asm
do
  asm0=${asm/.s/.0}
  return_s=$(diff -q $asm $asm0)
  return_c=$?
  checker "#diff error" "$return_s" $return_c
  echo "OK, $asm"
done < <(find $dist_src -name "*.s")

#---------------------------------------------------------
# 2. check that all examples compile and run without errors
while read edir
do
  return_s=$(make -C $edir clean 2>&1)
  return_c=$?
  checker "#make clean" "$return_s" $return_c

  return_s=$(make -C $edir default 2>&1)
  return_c=$?
  checker "#make all" "$return_s" $return_c

  return_s=$($edir/example 2>&1)
  return_c=$?
  checker "#run example" "$return_s" $return_c

  echo "OK, $edir"

done < <(find $dist_src -name "example.c" -printf "%h\n")

